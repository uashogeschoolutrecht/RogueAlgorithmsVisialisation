{"version":3,"file":"static/js/298.5dbd246f.chunk.js","mappings":"sRASO,SAASA,EAAmBC,EAAaC,EAAmBC,GAC/D,IAAIC,GAASH,EAAMC,IAAcC,EAAYD,GAAU,EAJrC,EAMlB,OAAIE,EAAO,EAAiB,EAAPA,EACdA,CACX,CCAA,iBACI,IAAMC,GAAQC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,SAASC,WAAWJ,KAAK,IACzEK,GAAYC,EAAAA,EAAAA,MACVC,GAAWC,EAAAA,EAAAA,MAAXD,OACFE,GAAWC,EAAAA,EAAAA,MAwCjB,OAtCAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,EAAAA,mBACvBb,EAAMc,MAAMC,SAAQ,SAAAC,GAAI,OAAIJ,EAAWK,QAAQD,EAAKE,IAAG,kBDqBlD,CACHC,EAAiB,IAAdC,KAAKC,SACRC,EAAiB,IAAdF,KAAKC,WCpBLL,GACH,IACFO,QAAQC,IAAI,gBACZ,IAAMC,EAASb,EAAWE,QAAQY,KAAI,SAACV,GAAI,OAAKJ,EAAWe,iBAAiBX,EAAM,oBAAoB,IAChGY,EAAwB5B,EAAM6B,MAAMH,KAAI,SAAAI,GAAI,OAAIA,EAAKC,aAAaC,MAAM,IACxEC,EAAgBb,KAAKc,IAAG,MAARd,MAAI,OAAQQ,IAC5BO,EAAgBf,KAAKgB,IAAG,MAARhB,MAAI,OAAQQ,IAC5BS,EAAgBjB,KAAKc,IAAG,MAARd,MAAI,OAAQK,IAC5Ba,EAAgBlB,KAAKgB,IAAG,MAARhB,MAAI,OAAQK,IAElCF,QAAQC,IAAI,gBACZxB,EAAM6B,MAAMd,SAAQ,SAAAwB,GAAI,OAAI3B,EAAW4B,uBAAuB,GAAD,OAAID,EAAKE,OAAM,YAAIF,EAAKG,QAAUH,EAAKE,OAAQF,EAAKG,OAC7G,CAEI3C,KAAMJ,EAAmB4C,EAAKR,aAAaC,OAAQC,EAAeE,IACpE,IACNZ,QAAQC,IAAI,0BACZZ,EAAW+B,aAAY,SAAA3B,GD3BtB,IAA8BpB,EAAaC,EC4B1Ce,EAAWgC,iBAAiB5B,EAAM,QD5BLpB,EC8BxBgB,EAAWe,iBAAiBX,EAAM,qBAAuBJ,EAAWe,iBAAiBX,EAAM,uBD1BjG,SAA8BA,EAAchB,GAC/C,IAAI6C,EAAeC,OAAOC,SAAS/B,GAGnC,OAFmBhB,EAAM6B,MAAMmB,QAAO,SAAAT,GAAI,OAAIA,EAAKE,SAAWI,CAAY,IAEtDnB,KAAI,SAAAI,GAAI,OAAIA,EAAKC,aAAaC,MAAM,IACnDiB,QAAO,SAACC,EAAOC,GAAO,OAAKD,EAASC,CAAO,GAAE,EACtD,CCqBcC,CAAoBpC,EAAMhB,ID9B3BJ,GADqCC,EC+BFwC,KAAeC,ED9BlBzC,GAAU,GAZjC,IC4Cd,IAAIgC,EDtBL,SAA8Bb,EAAchB,GAC/C,IAAI6C,EAAeC,OAAOC,SAAS/B,GAC/BqC,EAAgBrD,EAAM6B,MAAMmB,QAAO,SAAAT,GAAI,OAAIA,EAAKE,SAAWI,CAAY,IACvES,EAAgBtD,EAAM6B,MAAMmB,QAAO,SAAAT,GAAI,OAAIA,EAAKG,SAAWG,CAAY,IAM3E,MAAO,CACHJ,OALkBY,EAAc3B,KAAI,SAAAI,GAAI,OAAIA,EAAKC,aAAaC,MAAM,IACnEiB,QAAO,SAACC,EAAOC,GAAO,OAAKD,EAASC,CAAO,GAAE,GAK9CT,OAJkBY,EAAc5B,KAAI,SAAAI,GAAI,OAAIA,EAAKC,aAAaC,MAAM,IACnEiB,QAAO,SAACC,EAAOC,GAAO,OAAKD,EAASC,CAAO,GAAE,GAMtD,CCQoBI,CAAqBvC,EAAMhB,GACvCY,EAAWgC,iBAAiB5B,EAAM,QDAnC,SAAkBwC,EAAqBC,GAC1C,IAAIC,EAAaF,EAAcC,EAC5B,GAAKC,GAAc,EAClB,MAAO,UACX,IAAIC,EAAiBH,EAAcE,EAAc,IAC7CE,EAAiBH,EAAcC,EAAc,IACjD,OAAIC,EAAgBC,EACT,UACDA,EAAgBD,EACf,UEzDK,SF6DpB,CCZUE,CAAShC,EAAMY,OAAQZ,EAAMa,QAEjC,IACArC,EAAUO,GACVL,IACAE,GAASqD,EAAAA,EAAAA,GAAQ,CAACC,MAAK,EAAOC,KAAK,KACrC,GAAG,CAAChE,IAEG,IACR,C","sources":["utils/graphUtils.ts","components/graph/Graph.tsx","types/colors.ts"],"sourcesContent":["import { MultiDirectedGraph } from \"graphology\";\r\nimport { GREY } from \"../types/colors\";\r\nimport { NetworkGraph } from \"../types/types\";\r\n\r\nconst MIN_NODE_SIZE = 2;\r\nconst MAX_NODE_SIZE = 30;\r\nconst MIN_EDGE_SIZE = 1;\r\nconst MAX_EDGE_SIZE = 4;\r\n\r\nexport function calculateEgdeValue(val: number, minDegree: number, maxDegree: number){\r\n    let size = ((val - minDegree) / (maxDegree - minDegree)) * \r\n            (MAX_EDGE_SIZE - MIN_EDGE_SIZE) + MIN_EDGE_SIZE;\r\n    if (size > 1) return size * 2;\r\n    return size;    \r\n}\r\nexport function  calculateNodeValue (val: number, minDegree: number, maxDegree: number){\r\n    return ((val - minDegree) / (maxDegree - minDegree)) * \r\n            (MAX_NODE_SIZE - MIN_NODE_SIZE) + MIN_NODE_SIZE\r\n}\r\nexport function calculateTotalLinks (node: string, graph: NetworkGraph){\r\n    let nodeAsNumber = Number.parseInt(node);\r\n    let edgesOfNodes = graph.links.filter(link => link.source === nodeAsNumber );\r\n\r\n    return edgesOfNodes.map(edge => edge.similarities.length)\r\n        .reduce((total, current) => total += current, 0);\r\n}\r\nexport function getTotalTypesOfLinks(node: string, graph: NetworkGraph){\r\n    let nodeAsNumber = Number.parseInt(node);\r\n    let linksAsSource = graph.links.filter(link => link.source === nodeAsNumber);\r\n    let linksAsTarget = graph.links.filter(link => link.target === nodeAsNumber);\r\n\r\n    let totalSimsSource = linksAsSource.map(edge => edge.similarities.length)\r\n        .reduce((total, current) => total += current, 0);\r\n    let totalSimsTarget = linksAsTarget.map(edge => edge.similarities.length)\r\n        .reduce((total, current) => total += current, 0);\r\n    return {\r\n        source: totalSimsSource,\r\n        target: totalSimsTarget\r\n    }\r\n\r\n}\r\n\r\nexport function getRandomPosition(){\r\n    return {\r\n        x: Math.random()*100,\r\n        y: Math.random()*100\r\n    }\r\n};\r\n\r\nexport function getColor(totalSource: number, totalTarget: number){\r\n    let totalLinks = totalSource + totalTarget;\r\n       if ( totalLinks <= 5)\r\n        return \"#777777\";\r\n    let sourcePercent = (totalSource / totalLinks) * 100 ;\r\n    let targetPercent = (totalTarget / totalLinks) * 100 ;\r\n    if( sourcePercent > targetPercent){\r\n        return \"#363A81\";\r\n    }else if (targetPercent > sourcePercent) {\r\n        return \"#813636\";\r\n    }\r\n\r\n    return GREY;\r\n}\r\n","import { useLoadGraph } from \"@react-sigma/core\";\r\nimport { useLayoutCirclepack } from \"@react-sigma/layout-circlepack\";\r\nimport { useLayoutForce } from \"@react-sigma/layout-force\";\r\nimport { useLayoutForceAtlas2 } from \"@react-sigma/layout-forceatlas2\";\r\nimport { useLayoutNoverlap } from \"@react-sigma/layout-noverlap\";\r\nimport { MultiDirectedGraph } from \"graphology\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { data } from \"vis-network\";\r\nimport { setShow } from \"../../slice/modal/modalSlice\";\r\nimport { RootState } from \"../../store/store\";\r\nimport { calculateEgdeValue, calculateNodeValue, calculateTotalLinks,  getColor, getRandomPosition, getTotalTypesOfLinks } from \"../../utils/graphUtils\";\r\n\r\nexport default () => {\r\n    const graph = useSelector((state: RootState) => state.pReducer.graphSlice.graph)\r\n    const loadGraph = useLoadGraph();\r\n    const { assign } = useLayoutNoverlap();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n      const Multigraph = new MultiDirectedGraph();\r\n      graph.nodes.forEach(node => Multigraph.addNode(node.id, \r\n      {\r\n        ...getRandomPosition(), \r\n        ...node,\r\n      }));        \r\n      console.log(\"Adding nodes\");\r\n      const scores = Multigraph.nodes().map((node) => Multigraph.getNodeAttribute(node, \"totalSimilarities\"));      \r\n      const similaritiesCountList = graph.links.map(edge => edge.similarities.length);\r\n      const minEdgeDegree = Math.min(...similaritiesCountList);\r\n      const maxEgdeDegree = Math.max(...similaritiesCountList)\r\n      const minNodeDegree = Math.min(...scores);\r\n      const maxNodeDegree = Math.max(...scores);\r\n\r\n      console.log(\"Adding edges\");\r\n      graph.links.forEach(link => Multigraph.addDirectedEdgeWithKey(`${link.source}-${link.target}`, link.source, link.target, \r\n          {   \r\n              // weight: calculateEgdeValue(link.similarities.length, minEdgeDegree, maxEgdeDegree), \r\n              size: calculateEgdeValue(link.similarities.length, minEdgeDegree, maxEgdeDegree)\r\n          }));\r\n      console.log(\"Setting size and color\");\r\n      Multigraph.forEachNode(node => {\r\n        Multigraph.setNodeAttribute(node, \"size\",\r\n          calculateNodeValue(\r\n            (Multigraph.getNodeAttribute(node, \"totalSimilarities\") + Multigraph.getNodeAttribute(node, \"amountOfConnections\") ) \r\n            + calculateTotalLinks(node, graph), minNodeDegree, maxNodeDegree)\r\n        );\r\n        let links = getTotalTypesOfLinks(node, graph);\r\n        Multigraph.setNodeAttribute(node, \"color\",\r\n          getColor(links.source, links.target) \r\n        );\r\n      });\r\n      loadGraph(Multigraph);\r\n      assign();\r\n      dispatch(setShow({show:false, type:\"\"}))\r\n    }, [graph]);\r\n\r\n    return null;\r\n  };","\r\nexport const GREY = \"#999999\";"],"names":["calculateEgdeValue","val","minDegree","maxDegree","size","graph","useSelector","state","pReducer","graphSlice","loadGraph","useLoadGraph","assign","useLayoutNoverlap","dispatch","useDispatch","useEffect","Multigraph","MultiDirectedGraph","nodes","forEach","node","addNode","id","x","Math","random","y","console","log","scores","map","getNodeAttribute","similaritiesCountList","links","edge","similarities","length","minEdgeDegree","min","maxEgdeDegree","max","minNodeDegree","maxNodeDegree","link","addDirectedEdgeWithKey","source","target","forEachNode","setNodeAttribute","nodeAsNumber","Number","parseInt","filter","reduce","total","current","calculateTotalLinks","linksAsSource","linksAsTarget","getTotalTypesOfLinks","totalSource","totalTarget","totalLinks","sourcePercent","targetPercent","getColor","setShow","show","type"],"sourceRoot":""}